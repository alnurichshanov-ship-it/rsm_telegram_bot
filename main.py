import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# --- –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù ---
TELEGRAM_BOT_TOKEN = '7961105363:AAEo5UqQ3JGTpeFJHrV2_h1WTfck17F0v9E'
WEBHOOK_URL = "https://script.google.com/macros/s/AKfycbwJmHrBXep8JLUadTvporyxy_mYJYByYnkYqvRbTqkQVjn7r8xGS7QJNYaJYsCgdB-E/exec"
GOOGLE_SHEET_LINK = "https://docs.google.com/spreadsheets/AKfycbwJmHrBXep8JLUadTvporyxy_mYJYByYnkYqvRbTqkQVjn7r8xGS7QJNYaJYsCgdB-E/edit"  # –ø–æ –∂–µ–ª–∞–Ω–∏—é, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è
(CITY, NAME, STORE, VISIT, PRESENT, TAGS, COMMENT) = range(7)

# --- –§–∏–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏—Ç—å —á—Ç–µ–Ω–∏–µ–º –∏–∑ Google Sheets –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
USERS = {
    "123456789": {"name": "–ò–≤–∞–Ω", "status": "RSM"},
    "987654321": {"name": "–ê–Ω–Ω–∞", "status": "Admin"},
}

# --- /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
    user = USERS.get(user_id)

    if user:
        if user["status"] == "RSM":
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É. –í –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ?")
            return CITY
        elif user["status"] == "Admin":
            await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:\n{GOOGLE_SHEET_LINK}")
            return ConversationHandler.END
    else:
        await update.message.reply_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏ –§–ò–û –¥–ª—è –∑–∞—è–≤–∫–∏:")
        context.user_data["status"] = "pending"
        return NAME

# --- –®–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã
async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–§–ò–û –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä–∞?")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("status") == "pending":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        payload = {
            "telegram_id": update.effective_user.id,
            "full_name": update.message.text,
            "status": "Pending"
        }
        requests.post(WEBHOOK_URL, json=payload)
        await update.message.reply_text("üì© –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return ConversationHandler.END
    context.user_data["merch_name"] = update.message.text
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞?")
    return STORE

async def store(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["store_name"] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text("–í–∏–∑–∏—Ç —Å–æ—Å—Ç–æ—è–ª—Å—è?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return VISIT

async def visit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["visit"] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text("–ú–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return PRESENT

async def present(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["merch_present"] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text("–¶–µ–Ω–Ω–∏–∫–∏ –µ—Å—Ç—å?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return TAGS

async def tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price_tags"] = update.message.text
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=ReplyKeyboardRemove())
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    payload = {
        "telegram_id": update.effective_user.id,
        "city": context.user_data["city"],
        "merch_name": context.user_data["merch_name"],
        "store_name": context.user_data["store_name"],
        "visit": context.user_data["visit"],
        "merch_present": context.user_data["merch_present"],
        "price_tags": context.user_data["price_tags"],
        "comment": context.user_data["comment"],
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    try:
        response = requests.post(WEBHOOK_URL, json=payload)
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")

    return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            STORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, store)],
            VISIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, visit)],
            PRESENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, present)],
            TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, tags)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
